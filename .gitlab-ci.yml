stages:
  - build
  - publish

variables:
  BUILD_NUMBER: $CI_PIPELINE_ID

build:
  image: mcr.microsoft.com/dotnet/sdk:6.0
  stage: build
  script:
    - dotnet build
  after_script:
    - |
      if [ "$CI_JOB_STATUS" = "success" ]
      then
      echo "STATUS_MARK=%3Awhite_check_mark%3A" >> build.env
      elif [ "$CI_JOB_STATUS" = "failed" ]
      then
      echo "STATUS_MARK=%3Ax%3A" >> build.env
      elif [ "$CI_JOB_STATUS" = "canceled" ]
      then
      echo "STATUS_MARK=%3Aheavy_minus_sign%3A" >> build.env
      fi
      source build.env
      curl -d "text=____________________ %0AProject <$CI_PROJECT_URL| $CI_PROJECT_NAME> %0ABranch <$CI_PROJECT_URL'/-/tree/'$CI_COMMIT_BRANCH| $CI_COMMIT_BRANCH> %0APipeline <$CI_PIPELINE_URL | $CI_PIPELINE_ID > %0A$CI_JOB_NAME <$CI_JOB_URL | $CI_JOB_ID > $STATUS_MARK $CI_JOB_STATUS %0ACommit <$CI_PROJECT_URL/-/commit/$CI_COMMIT_SHA| $CI_COMMIT_MESSAGE> %0A____________________" -d "channel=backend-builds" -H "Authorization: Bearer xoxb-3808733341829-3914195893651-TTl2yy8UtH3KceekriFqxDK1" -X POST https://slack.com/api/chat.postMessage
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"' # Run pipelines on schedule
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      when: always
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH' # Run pipelines on main branch
      when: always
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH' # Run pipelines on any other branch
      when: always
  tags:
    - docker

release:
  image: mcr.microsoft.com/dotnet/sdk:6.0
  stage: publish
  needs: ['build']
  script:
    - dotnet publish -c Release -o publish ./Runtime/GameLib.Core.csproj
    - dotnet pack -c Release --no-restore --no-build ./Runtime/GameLib.Core.csproj -o publish
    - dotnet nuget push publish/*.nupkg --source http://${NEXUS_SERVER}/repository/${NEXUS_REPOSITORY} --api-key ${NUGET_APIKEY} --skip-duplicate
  after_script:
    - |
      if [ "$CI_JOB_STATUS" = "success" ]
      then
      echo "STATUS_MARK=%3Awhite_check_mark%3A" >> build.env
      elif [ "$CI_JOB_STATUS" = "failed" ]
      then
      echo "STATUS_MARK=%3Ax%3A" >> build.env
      elif [ "$CI_JOB_STATUS" = "canceled" ]
      then
      echo "STATUS_MARK=%3Aheavy_minus_sign%3A" >> build.env
      fi
      filename=$(find $CI_PROJECT_DIR/publish -name '*.nupkg' -printf %f\\n\\r)
      echo $filename
      package=${filename%.*.*.*.*}
      echo $package
      file="${filename%.*}"
      echo $file
      name="${file#*.*}"
      echo $name
      version="${name#*.*.*}"
      echo $version
      source build.env
      curl -d "text=____________________ %0AProject <$CI_PROJECT_URL| $CI_PROJECT_NAME> %0ABranch <$CI_PROJECT_URL'/-/tree/'$CI_COMMIT_BRANCH| $CI_COMMIT_BRANCH> %0APipeline <$CI_PIPELINE_URL | $CI_PIPELINE_ID > %0A$CI_JOB_NAME <$CI_JOB_URL | $CI_JOB_ID > $STATUS_MARK $CI_JOB_STATUS %0ACommit <$CI_PROJECT_URL/-/commit/$CI_COMMIT_SHA | $CI_COMMIT_MESSAGE> %0APublished <$CI_JOB_URL/artifacts/browse/publish/ | artifacts> %0A %60dotnet add package $package --version $version%60 %0A____________________" -d "channel=backend-builds" -H "Authorization: Bearer xoxb-3808733341829-3914195893651-TTl2yy8UtH3KceekriFqxDK1" -X POST https://slack.com/api/chat.postMessage
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"' # Run pipelines on schedule
      when: always
    - if: '$CI_COMMIT_BRANCH =~ /^release/'
      when: always
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH' # Run pipelines on main branch
      when: always
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH' # Run pipelines on any other branch
      when: always
  artifacts:
    paths:
      - publish/
  tags:
    - docker
